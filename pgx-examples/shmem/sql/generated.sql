-- This file is auto generated by pgx.
-- `extension_sql!()` defined SQL.


-- Enums derived via `#[derive(PostgresEnum)]`


-- Shell types for types defined by `#[derive(PostgresType)]`

-- src/lib.rs:12
-- shmem::Pgtest
-- shmem::Pgtest - TypeId { t: 3808338377216309110 }
-- Option<shmem::Pgtest> - TypeId { t: 2578457705036987087 }
-- Vec<shmem::Pgtest> - TypeId { t: 15372509256152749855 }
CREATE TYPE Pgtest;

-- Functions defined by `#[pg_extern]`

-- src/lib.rs:111
-- shmem::atomic_set
CREATE OR REPLACE FUNCTION "atomic_set"(
	"value" bool /* bool */
) RETURNS bool /* bool */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'atomic_set';

-- src/lib.rs:106
-- shmem::atomic_get
CREATE OR REPLACE FUNCTION "atomic_get"() RETURNS bool /* bool */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'atomic_get';

-- src/lib.rs:101
-- shmem::primitive_set
CREATE OR REPLACE FUNCTION "primitive_set"(
	"value" integer /* i32 */
) RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'primitive_set';

-- src/lib.rs:96
-- shmem::primitive_get
CREATE OR REPLACE FUNCTION "primitive_get"() RETURNS integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'primitive_get';

-- src/lib.rs:91
-- shmem::struct_set
CREATE OR REPLACE FUNCTION "struct_set"(
	"value1" integer ,/* i32 */
	"value2" integer /* i32 */
) RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'struct_set';

-- src/lib.rs:86
-- shmem::struct_get
CREATE OR REPLACE FUNCTION "struct_get"() RETURNS Pgtest /* shmem::Pgtest */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'struct_get';

-- src/lib.rs:81
-- shmem::hash_get
CREATE OR REPLACE FUNCTION "hash_get"(
	"key" integer /* i32 */
) RETURNS integer /* core::option::Option<i32> */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hash_get';

-- src/lib.rs:76
-- shmem::hash_insert
CREATE OR REPLACE FUNCTION "hash_insert"(
	"key" integer ,/* i32 */
	"value" integer /* i32 */
) RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'hash_insert';

-- src/lib.rs:71
-- shmem::vec_pop
CREATE OR REPLACE FUNCTION "vec_pop"() RETURNS Pgtest /* core::option::Option<shmem::Pgtest> */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vec_pop';

-- src/lib.rs:64
-- shmem::vec_push
CREATE OR REPLACE FUNCTION "vec_push"(
	"value" Pgtest /* shmem::Pgtest */
) RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vec_push';

-- src/lib.rs:56
-- shmem::vec_drain
CREATE OR REPLACE FUNCTION "vec_drain"() RETURNS SETOF Pgtest /* shmem::Pgtest */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vec_drain';

-- src/lib.rs:51
-- shmem::vec_count
CREATE OR REPLACE FUNCTION "vec_count"() RETURNS integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vec_count';

-- src/lib.rs:42
-- shmem::vec_select
CREATE OR REPLACE FUNCTION "vec_select"() RETURNS SETOF Pgtest /* shmem::Pgtest */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'vec_select';

-- src/lib.rs:12
-- shmem::pgtest_out
CREATE OR REPLACE FUNCTION "pgtest_out"(
	"input" Pgtest /* shmem::Pgtest */
) RETURNS cstring /* &std::ffi::c_str::CStr */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pgtest_out';

-- src/lib.rs:12
-- shmem::pgtest_in
CREATE OR REPLACE FUNCTION "pgtest_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS Pgtest /* shmem::Pgtest */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'pgtest_in';


-- Types defined by `#[derive(PostgresType)]`

-- src/lib.rs:12
-- shmem::Pgtest - TypeId { t: 3808338377216309110 }
-- Option<shmem::Pgtest> - TypeId { t: 2578457705036987087 }
-- Vec<shmem::Pgtest> - TypeId { t: 15372509256152749855 }
CREATE TYPE Pgtest (
	INTERNALLENGTH = variable,
	INPUT = pgtest_in,
	OUTPUT = pgtest_out,
	STORAGE = extended
);
                            

-- Operator classes defined by `#[derive(PostgresHash, PostgresOrd)]`

