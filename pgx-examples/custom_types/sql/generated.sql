-- This file is auto generated by pgx.
                            
-- src/generic_enum.rs
-- custom_types::generic_enum::SomeValue - TypeId { t: 3285901236539264768 }
-- Option<custom_types::generic_enum::SomeValue> - TypeId { t: 5435104071091652713 }
-- Vec<custom_types::generic_enum::SomeValue> - TypeId { t: 4124437261468214513 }
CREATE TYPE SomeValue AS ENUM (
	'One',
	'Two',
	'Three',
	'Four',
	'Five',
)


-- src/complex.rs
-- custom_types::complex::Animals
-- custom_types::complex::Animals - TypeId { t: 11043359249224717473 }
-- Option<custom_types::complex::Animals> - TypeId { t: 3525015711094508987 }
-- Vec<custom_types::complex::Animals> - TypeId { t: 15129271924437513678 }
CREATE TYPE Animals;

-- src/hstore_clone.rs
-- custom_types::hstore_clone::RustStore
-- custom_types::hstore_clone::RustStore - TypeId { t: 5376120889181564465 }
-- Option<custom_types::hstore_clone::RustStore> - TypeId { t: 8462575631676821055 }
-- Vec<custom_types::hstore_clone::RustStore> - TypeId { t: 3373280934331863547 }
CREATE TYPE RustStore;

-- src/fixed_size.rs
-- custom_types::fixed_size::FixedF32Array
-- custom_types::fixed_size::FixedF32Array - TypeId { t: 11996455731145565536 }
-- Option<custom_types::fixed_size::FixedF32Array> - TypeId { t: 8696198492034393576 }
-- Vec<custom_types::fixed_size::FixedF32Array> - TypeId { t: 5125146536688131110 }
CREATE TYPE FixedF32Array;


-- src/complex.rs
-- custom_types::complex::add_animal
CREATE OR REPLACE FUNCTION "add_animal"(
	"animals" Animals /* custom_types::complex::Animals */,
	"name" text DEFAULT "Nooooo" /* alloc::string::String */,
	"age" integer /* i32 */
) RETURNS Animals /* custom_types::complex::Animals */
 LANGUAGE c
AS 'MODULE_PATHNAME', 'add_animal';

-- src/complex.rs
-- custom_types::complex::make_animals
CREATE OR REPLACE FUNCTION "make_animals"(
	"animals" text[] /* pgx::datum::array::Array<alloc::string::String> */,
	"ages" integer[] /* pgx::datum::array::Array<i32> */
) RETURNS Animals /* custom_types::complex::Animals */
 LANGUAGE c
AS 'MODULE_PATHNAME', 'make_animals';

-- src/complex.rs
-- custom_types::complex::known_animals
CREATE OR REPLACE FUNCTION "known_animals"(

) RETURNS Animals /* custom_types::complex::Animals */
 LANGUAGE c
AS 'MODULE_PATHNAME', 'known_animals';

-- src/complex.rs
-- custom_types::complex::animals_out
CREATE OR REPLACE FUNCTION "animals_out"(
	"input" Animals /* custom_types::complex::Animals */
) RETURNS cstring /* &std::ffi::c_str::CStr */
Immutable ParallelSafe LANGUAGE c
AS 'MODULE_PATHNAME', 'animals_out';

-- src/complex.rs
-- custom_types::complex::animals_in
CREATE OR REPLACE FUNCTION "animals_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS Animals /* custom_types::complex::Animals */
Immutable ParallelSafe LANGUAGE c
AS 'MODULE_PATHNAME', 'animals_in';

-- src/generic_enum.rs
-- custom_types::generic_enum::get_some_value_name
CREATE OR REPLACE FUNCTION "get_some_value_name"(
	"input" SomeValue /* custom_types::generic_enum::SomeValue */
) RETURNS text /* alloc::string::String */
 LANGUAGE c
AS 'MODULE_PATHNAME', 'get_some_value_name';

-- src/hstore_clone.rs
-- custom_types::hstore_clone::rstore_table
CREATE OR REPLACE FUNCTION "rstore_table"(
	"rstore" RustStore /* core::option::Option<custom_types::hstore_clone::RustStore> */
) RETURNS TABLE ("key" text /* alloc::string::String */,"value" text /* alloc::string::String */)
 LANGUAGE c
AS 'MODULE_PATHNAME', 'rstore_table';

-- src/hstore_clone.rs
-- custom_types::hstore_clone::rstore_size
CREATE OR REPLACE FUNCTION "rstore_size"(
	"rstore" RustStore /* core::option::Option<custom_types::hstore_clone::RustStore> */
) RETURNS bigint /* i64 */
 LANGUAGE c
AS 'MODULE_PATHNAME', 'rstore_size';

-- src/hstore_clone.rs
-- custom_types::hstore_clone::rstore_remove
CREATE OR REPLACE FUNCTION "rstore_remove"(
	"rstore" RustStore /* core::option::Option<custom_types::hstore_clone::RustStore> */,
	"key" text /* alloc::string::String */
) RETURNS RustStore /* core::option::Option<custom_types::hstore_clone::RustStore> */
 LANGUAGE c
AS 'MODULE_PATHNAME', 'rstore_remove';

-- src/hstore_clone.rs
-- custom_types::hstore_clone::rstore_get
CREATE OR REPLACE FUNCTION "rstore_get"(
	"rstore" RustStore /* core::option::Option<custom_types::hstore_clone::RustStore> */,
	"key" text /* alloc::string::String */
) RETURNS text /* core::option::Option<alloc::string::String> */
 LANGUAGE c
AS 'MODULE_PATHNAME', 'rstore_get';

-- src/hstore_clone.rs
-- custom_types::hstore_clone::rstore_put
CREATE OR REPLACE FUNCTION "rstore_put"(
	"rstore" RustStore /* core::option::Option<custom_types::hstore_clone::RustStore> */,
	"key" text /* alloc::string::String */,
	"value" text /* alloc::string::String */
) RETURNS RustStore /* custom_types::hstore_clone::RustStore */
 LANGUAGE c
AS 'MODULE_PATHNAME', 'rstore_put';

-- src/hstore_clone.rs
-- custom_types::hstore_clone::rstore
CREATE OR REPLACE FUNCTION "rstore"(
	"key" text /* alloc::string::String */,
	"value" text /* alloc::string::String */
) RETURNS RustStore /* custom_types::hstore_clone::RustStore */
 LANGUAGE c
AS 'MODULE_PATHNAME', 'rstore';

-- src/hstore_clone.rs
-- custom_types::hstore_clone::ruststore_out
CREATE OR REPLACE FUNCTION "ruststore_out"(
	"input" RustStore /* custom_types::hstore_clone::RustStore */
) RETURNS cstring /* &std::ffi::c_str::CStr */
Immutable ParallelSafe LANGUAGE c
AS 'MODULE_PATHNAME', 'ruststore_out';

-- src/hstore_clone.rs
-- custom_types::hstore_clone::ruststore_in
CREATE OR REPLACE FUNCTION "ruststore_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS RustStore /* custom_types::hstore_clone::RustStore */
Immutable ParallelSafe LANGUAGE c
AS 'MODULE_PATHNAME', 'ruststore_in';

-- src/fixed_size.rs
-- custom_types::fixed_size::fixedf32array_add
CREATE OR REPLACE FUNCTION "fixedf32array_add"(
	"left" pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */,
	"right" pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */
) RETURNS pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */
Immutable ParallelSafe LANGUAGE c
AS 'MODULE_PATHNAME', 'fixedf32array_add';

-- src/fixed_size.rs
-- custom_types::fixed_size::fixedf32array_add
CREATE OPERATOR + (
	PROCEDURE="fixedf32array_add,"
	LEFTARG=pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */,
	RIGHTARG=pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */

)

-- src/fixed_size.rs
-- custom_types::fixed_size::fixedf32array_distance
CREATE OR REPLACE FUNCTION "fixedf32array_distance"(
	"left" pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */,
	"right" pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */
) RETURNS double precision /* f64 */
Immutable ParallelSafe LANGUAGE c
AS 'MODULE_PATHNAME', 'fixedf32array_distance';

-- src/fixed_size.rs
-- custom_types::fixed_size::fixedf32array_distance
CREATE OPERATOR < # > (
	PROCEDURE="fixedf32array_distance,"
	LEFTARG=pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */,
	RIGHTARG=pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */

)

-- src/fixed_size.rs
-- custom_types::fixed_size::fixedf32array_out
CREATE OR REPLACE FUNCTION "fixedf32array_out"(
	"input" pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */
) RETURNS cstring /* &std::ffi::c_str::CStr */
Immutable ParallelSafe LANGUAGE c
AS 'MODULE_PATHNAME', 'fixedf32array_out';

-- src/fixed_size.rs
-- custom_types::fixed_size::fixedf32array_in
CREATE OR REPLACE FUNCTION "fixedf32array_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> /* pgx::datum::varlena::PgVarlena<custom_types::fixed_size::FixedF32Array> */
Immutable ParallelSafe LANGUAGE c
AS 'MODULE_PATHNAME', 'fixedf32array_in';


-- src/complex.rs
-- custom_types::complex::Animals - TypeId { t: 11043359249224717473 }
-- Option<custom_types::complex::Animals> - TypeId { t: 3525015711094508987 }
-- Vec<custom_types::complex::Animals> - TypeId { t: 15129271924437513678 }
CREATE TYPE Animals (
	INTERNALLENGTH = variable,
	INPUT = animals_in,
	OUTPUT = animals_out,
	STORAGE = extended
);

-- src/hstore_clone.rs
-- custom_types::hstore_clone::RustStore - TypeId { t: 5376120889181564465 }
-- Option<custom_types::hstore_clone::RustStore> - TypeId { t: 8462575631676821055 }
-- Vec<custom_types::hstore_clone::RustStore> - TypeId { t: 3373280934331863547 }
CREATE TYPE RustStore (
	INTERNALLENGTH = variable,
	INPUT = ruststore_in,
	OUTPUT = ruststore_out,
	STORAGE = extended
);

-- src/fixed_size.rs
-- custom_types::fixed_size::FixedF32Array - TypeId { t: 11996455731145565536 }
-- Option<custom_types::fixed_size::FixedF32Array> - TypeId { t: 8696198492034393576 }
-- Vec<custom_types::fixed_size::FixedF32Array> - TypeId { t: 5125146536688131110 }
CREATE TYPE FixedF32Array (
	INTERNALLENGTH = variable,
	INPUT = fixedf32array_in,
	OUTPUT = fixedf32array_out,
	STORAGE = extended
);


